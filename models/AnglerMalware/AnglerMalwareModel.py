import pandas as pd
import re
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report, accuracy_score
import joblib  # For saving model & vectorizer

def train_decision_tree(malware_csv, benign_csv, model_output, vectorizer_output):
    # Read the malicious and benign CSVs
    df_malware = pd.read_csv(malware_csv, dtype=str).dropna(subset=["Imports"])
    df_benign  = pd.read_csv(benign_csv, dtype=str).dropna(subset=["Imports"])
    
    # If your CSVs already contain a 'malware' column, remove these lines or adapt accordingly
    df_malware["malware"] = 1
    df_benign["malware"] = 0
    
    # Combine into a single DataFrame
    df = pd.concat([df_malware, df_benign], ignore_index=True)
    
    # Clean & parse the Imports, removing ".dll" etc.
    cleaned_imports_list = []
    for imports_str in df["Imports"]:
        # Split by |
        imports_split = imports_str.split("|")
        row_imports = []
        for imp in imports_split:
            imp = imp.strip()
            if not imp:
                continue
            
            # Partition on the first colon
            module_part, sep, func_part = imp.partition(":")
            if module_part.lower().endswith(".dll"):
                # Keep the function part if it exists
                func_part = func_part.strip()
                if func_part:
                    row_imports.append(func_part)
            else:
                # If it doesn't match the .dll pattern, keep as is (optional)
                row_imports.append(imp)
        
        # Join them into a single string
        cleaned_imports_list.append(" ".join(row_imports))
    
    # Create labels
    y = df["malware"].astype(int)
    
    # Vectorize
    vectorizer = CountVectorizer(token_pattern=r"\S+")
    X = vectorizer.fit_transform(cleaned_imports_list)
    
    # Train/test split
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    # Train a Decision Tree
    clf = DecisionTreeClassifier(max_depth=10, min_samples_split=5)
    clf.fit(X_train, y_train)
    
    # Evaluate on the test split
    y_pred = clf.predict(X_test)
    print("=== Decision Tree Evaluation ===")
    print("Accuracy: ", accuracy_score(y_test, y_pred))
    print("Classification Report:\n", classification_report(y_test, y_pred, digits=4))
    
    # Export the trained model and vectorizer
    joblib.dump(clf, model_output)
    joblib.dump(vectorizer, vectorizer_output)
    print(f"Model saved to {model_output}")
    print(f"Vectorizer saved to {vectorizer_output}")

if __name__ == "__main__":
    # Example usage:
    # python train_model.py
    # Adjust the CSV filenames as needed
    malware_csv = "collector/malware.csv"   # CSV for malware=1
    benign_csv  = "collector/legit.csv"  # CSV for malware=0
    model_out   = "dt_model.joblib"
    vec_out     = "dt_vectorizer.joblib"
    
    train_decision_tree(malware_csv, benign_csv, model_out, vec_out)
