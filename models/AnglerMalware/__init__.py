import joblib, pefile, warnings, os
from .deepseek import ask_deepseek, TEXT_EXTENSIONS
from .external import check_malwarebazaar, calculate_md5
CLF = joblib.load(r"models\AnglerMalware\dt_model.joblib") # Path to your trained model
VECTORIZER = joblib.load(r"models\AnglerMalware\dt_vectorizer.joblib") # Path to your saved vectorizer
def extract_imports_from_exe(file_path:str):
    """
    Extracts imports from a PE executable file.
    
    Args:
        file_path: Path to the .exe file.

    Returns:
        A string of imports separated by '|', or None if imports cannot be extracted.
    """
    try:
        with open(file_path, 'rb') as f:
            file_data = f.read()

        # Parse the file data using pefile.PE
        pe = pefile.PE(data=file_data)
        imports = []

        # Iterate over the imported DLLs and their functions
        if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
            for entry in pe.DIRECTORY_ENTRY_IMPORT:
                dll_name = entry.dll.decode('utf-8', errors='ignore')
                for func in entry.imports:
                    if func.name:
                        function_name = func.name.decode('utf-8', errors='ignore')
                        imports.append(f"{dll_name}:{function_name}")
        
        return "|".join(imports)
    except Exception as e:
        print(f"Error extracting imports from {file_path}: {e}")
        return None


def preprocess_imports(imports_str:str):
    """
    Preprocesses the extracted imports to match the format used during training.

    Args:
        imports_str: The raw imports string separated by '|'.

    Returns:
        A preprocessed string of imports.
    """
    imports_split = imports_str.split("|")
    cleaned_imports = []

    for imp in imports_split:
        imp = imp.strip()
        if not imp:
            continue
        
        # Split DLL and function name
        module_part, sep, func_part = imp.partition(":")
        if module_part.lower().endswith(".dll"):
            if func_part.strip():
                cleaned_imports.append(func_part.strip())
        else:
            cleaned_imports.append(imp)
    
    return " ".join(cleaned_imports)


def predict_specific_exe(file_path):
    """
    Predicts whether a specific executable file is malicious or benign.

    Args:
        file_path: Path to the .exe file.

    Returns:
        The prediction (0 = benign, 1 = malicious).
    """
    imports_str = extract_imports_from_exe(file_path) # Extract imports from the executable
    if not imports_str:
        warnings.warn(f"No imports found in {file_path}. Cannot make a prediction.")
        return None

    preprocessed_imports = preprocess_imports(imports_str) # Preprocess the imports
    
    X_test = VECTORIZER.transform([preprocessed_imports]) # Transform the imports using the vectorizer

    prediction = CLF.predict(X_test)[0] # Make a prediction
    # print(f"Prediction for {file_path}: {'Malicious' if prediction == 1 else 'Benign'}")
    return bool(prediction) #convert int to bool
def get_file_extension(file_path:str) -> str:
    """Get the file extension from the file path."""
    return os.path.splitext(file_path)[1].lower().strip('.')
def predict_malware(file_path:str) -> bool:
    """Analyze a file to determine if it is malware."""
    is_malware = check_malwarebazaar(calculate_md5(file_path)) # Check MalwareBazaar
    if is_malware:
        return is_malware
    extension = get_file_extension(file_path) # Get the file extension
    
    if extension == "exe": # Check if the file is an executable
        return predict_specific_exe(file_path)
    
    with open(file_path, 'r') as file:
        code = file.read() 
    return ask_deepseek(code) # let deepseek handle it if it is a language   

if __name__ == "__main__":
    # Example usage
    exe_file_path = r"C:\Program Files\ffmpeg\bin\ffmpeg.exe"  # Replace with the path to your .exe file
    print(predict_specific_exe(file_path=exe_file_path))
    code_file_path = r"E:/Ollama/exclusions/deleteLinux.c"  # Replace with the path to your .exe file
    print(predict_malware(code_file_path))