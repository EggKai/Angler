import pandas as pd
import joblib
import re

def predict_on_new_data(test_csv, model_file, vectorizer_file, output_csv=None):
    """
    Loads a saved model and vectorizer, applies them to a new test CSV, 
    and outputs only 'SHA256' and 'predicted_malware'.
    
    test_csv should have at least columns: 'SHA256', 'Imports'.
    """
    
    # 1. Load the trained model and vectorizer
    clf = joblib.load(model_file)
    vectorizer = joblib.load(vectorizer_file)
    
    # 2. Read the new test data
    df_test = pd.read_csv(test_csv, dtype=str).dropna(subset=["Imports"])
    
    # 3. Preprocess the Imports in the same way as training
    cleaned_imports_list = []
    for imports_str in df_test["Imports"]:
        imports_split = imports_str.split("|")
        row_imports = []
        for imp in imports_split:
            imp = imp.strip()
            if not imp:
                continue
            
            module_part, sep, func_part = imp.partition(":")
            if module_part.lower().endswith(".dll"):
                if func_part.strip():
                    row_imports.append(func_part.strip())
            else:
                row_imports.append(imp)
        
        cleaned_imports_list.append(" ".join(row_imports))
    
    # 4. Transform with the loaded vectorizer
    X_test = vectorizer.transform(cleaned_imports_list)
    
    # 5. Predict with the loaded model
    predictions = clf.predict(X_test)
    
    # 6. Attach predictions to df_test
    df_test["predicted_malware"] = predictions
    
    # 7. Output only 'SHA256' and 'predicted_malware'
    #    Make sure the test CSV includes 'SHA256' so we can output it alongside predictions.
    columns_to_output = ["SHA256", "predicted_malware"]
    # Filter the DataFrame to keep only those columns
    df_output = df_test.loc[:, columns_to_output]
    
    if output_csv:
        df_output.to_csv(output_csv, index=False)
        print(f"Predictions saved to {output_csv}")
    else:
        # Print only the two columns to console
        print(df_output)

if __name__ == "__main__":
    # Example usage:
    # python test_model.py
    test_data  = "testdata_3_LEGITIMATE.csv"
    model_file = "dt_model.joblib"
    vec_file   = "dt_vectorizer.joblib"
    
    predict_on_new_data(
        test_csv=test_data,
        model_file=model_file,
        vectorizer_file=vec_file,
        output_csv="predictions_3.csv"  # or None to just print
    )
